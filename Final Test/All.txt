Are they Pangrams

//C++14
//Function
string isPangram(vector<string> pangram) {
    string result="";
    for(auto i=0;i<pangram.size();i++)
    {
        string s=pangram[i];
        sort(s.begin(), s.end());
        int pos=0, flag=0;
        for(int j=97;j<=122;j++)
        {
            flag=0;
            for(int k=pos;k<s.length();k++)
            {
                if(s[k]==(char)j)
                {
                    flag=1;
                    pos=k+1;
                    break;
                }
            }
            if(flag==0)
            break;
        }
        if(flag==0)
            result= result+"0";
        else {
        result= result+"1";
        }
    }
    return result;
}

//C++14
//Bit Logic
#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);



/*
 * Complete the 'maxXor' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER lo
 *  2. INTEGER hi
 *  3. INTEGER k
 */

int maxXor(int lo, int hi, int k) 
{
    int s,max=0,i,j;
    for(i=lo;i<=hi;i++)
    {
        for(j=lo;j<=hi;j++)
        {
            s=i^j;
            if(max<s&&s<=k)
            max=s;
        }
    }
    return max;

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string lo_temp;
    getline(cin, lo_temp);

    int lo = stoi(ltrim(rtrim(lo_temp)));

    string hi_temp;
    getline(cin, hi_temp);

    int hi = stoi(ltrim(rtrim(hi_temp)));

    string k_temp;
    getline(cin, k_temp);

    int k = stoi(ltrim(rtrim(k_temp)));

    int result = maxXor(lo, hi, k);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

//Bit Logic Function
//C++14

int maxXor(int lo, int hi, int k) {
int s,max=0,i,j;
for(i=lo;i<=hi;i++)
{
    for(j=lo;j<=hi;j++)
    {
        s=i^j;
        if(max<s&&s<=k)
        max=s;
    }
}

#Ad rotation
#Function
#Python
def complement(x):
    x = x.replace("0","2")
    x = x.replace("1", "0")
    x = x.replace("2", "1")
    return x
n=int(input())
x=bin(n).replace("0b", "")
y = complement(x)
print(int(y, 2))

//Vasya and birthday
//C++14


#include<iostream>
 
using namespace std;
 
void merge(int start,int mid,int end,int a[])
{
    int arr[end-start+1],p=start,q=mid+1,k=0,i;
    
    for(i=start;i<=end;i++)
    {
        if( p > mid)
        {
            arr[k++]=a[q++];
        }
        else if ( q > end)
        {
            arr[k++]=a[p++];
        }
        else if(a[p]>a[q])
        {
            arr[k++]=a[p++];
        }
        else
        {
            arr[k++]=a[q++];
        }
    }
    
    for(i=start;i<=end;i++)
    {
        a[i]=arr[i-start];
    }
}
 
void mergesort(int start,int end,int a[])
{
    if(start<end)
    {
        int mid=(start+end)/2;
        mergesort(start,mid,a);
        mergesort(mid+1,end,a);
        
        merge(start,mid,end,a);
    }
}
int main()
{
    int t,l;
    cin >> t;
    
    for(l=0;l<t;l++)
    {
        int n;
        cin >> n;
        
        int a[n],i;
        
        for(i=0;i<n;i++)
        {
            cin >> a[i];
        }
        
        int start=0,end=n-1;
        
        mergesort(start,end,a);
        
        for(i=0;i<n;i++)
        {
            cout << a[i] << " ";
        }
        
        cout << endl;
    }


 return 0;
}

//Vasya and birthday
//C++14

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
int cmp(const void*a,const void *b)
{
    return *(int*)b-*(int*)a;
}
int main() {
int t ;
    scanf("%d",&t);
    while(t--)
    {
        int n; scanf("%d",&n);
        int a[n];
        for(int i=0;i<n;i++) scanf("%d",&a[i]);
        qsort(a,n,sizeof(int),cmp);
        for(int i=0;i<n;i++) printf("%d ",a[i]);
        printf("\n");
    }
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}


//Highest Possible Product
//Python 3

n = int(input())
lis = []
i = input()

for x in i.split():
    lis.append(int(x))

lis.sort()

//Power of 2
//C++14


#include<math.h>
#include<bits/stdc++.h>
#include<iostream>
using namespace std;

bool isPowerOfTwo(int n)
{
    if(n==0)
    return false;
    return (ceil(log2(n)) == floor(log2(n)));
}
int main()
{
    int x;
    cin>>x;
    int a[x];
    for(int i=0;i<x;i++)
    {
        cin>>a[i];
    }
    for(int i=0;i<x;i++)
    {
        isPowerOfTwo(a[i]) ? cout<<"1"<<endl : cout<<"0"<<endl;
    }
    return 0;
}

//Zig Zag Array
//C++14

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct node
{
    int l;
    int r;
    //int data;
}a[10000];
int stack1[1000],stack2[10000];
int top1=-1,top2=-1;
void push1(int v)
{
    stack1[++top1]=v;
}
void push2(int v)
{
    stack2[++top2]=v;
}
int pop1()
{
    return stack1[top1--];
}
int pop2()
{
    return stack2[top2--];
}
int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int n,k;
    scanf("%d",&n);
    for(int i=0;i<n;i++)
    {
        a[i].l=0;
        a[i].r=0;
    }
    for(int i=0;i<n-1;i++)
    {
        int d,c;
        char f;
        scanf("%d %d %c",&c,&d,&f);
        if(f=='L')
            a[c].l=d;
        else
            a[c].r=d;
    }
    push1(1);
   // printf("%d\t%d\n",top1,top2);
    while(top1>=0 || top2>=0)
    {
        while(top1>=0)
        {
            k=pop1();
            printf("%d ",k);
            if(a[k].l!=0)
            push2(a[k].l);
            if(a[k].r!=0)
                push2(a[k].r);
        }
       /* for(int i=top2;i!=-1;i--)
            printf("\nstack %d \n",stack2[i]);
        */
        while(top2>=0)
        {
            k=pop2();
            printf("%d ",k);
            if(a[k].r!=0)
                push1(a[k].r);
            if(a[k].l!=0)
                push1(a[k].l);
        }
    }

    return 0;
}

//Generate Balanced Paranthesis
//C++14

#include<iostream>
#include<string.h>
using namespace std;

bool check(string str) 
{ 

    bool temp = true; 
    int sum = 0; 
  
    for (int i = 0; str[i] != '\0'; i++) { 
  
        if (str[i] == '(') { 
            sum++; 
        } 
        else { 
            sum--; 
        } 
        if (sum < 0) { 
            temp = false; 
            break; 
        } 
    } 
    
    if (sum != 0) { 
        temp = false; 
    } 
  
    return temp; 
} 

string push(string str1, string str2) 
{
 if(str2 == "(")
  str1.push_back('(');
 else
  str1.push_back(')');
 return str1; 
}

void get(int left, int right, string str)
{
 if(left == 0 && right == 0)
 {
  if (check(str))
   cout<<str<<endl;
 }
 else
 {
  if(left > 0)
   get(left-1,right,push(str,"("));
  if(right > 0)
   get(left,right-1,push(str,")"));
 }
}

void para(int n)
{
 get(n,n,"");
}


int main()
{
 int n;
 cin>>n;
 para(n);
 return 0;
}